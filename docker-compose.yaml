version: '3.8'

services:
  redis:
    image: redis:7.2
    container_name: redis
    ports:
      - '6380:6379'
    volumes:
      - redis_data:/data
    restart: always
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - bendis

  users_service:
    image: postgres
    container_name: users_service
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: User
    ports:
      - '5450:5432'
    volumes:
      - UserData:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "User" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - bendis

  product_service:
    image: postgres
    container_name: product_service
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: Product
    ports:
      - '5451:5432'
    volumes:
      - ProductData:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "Product" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - bendis

  story_service:
    image: postgres
    container_name: story_service
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: Story
    ports:
      - '5452:5432'
    volumes:
      - StoryData:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "Story" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - bendis

  comment_service:
    image: postgres
    container_name: comment_service
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: Comment
    ports:
      - '5453:5432'
    volumes:
      - CommentData:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "Comment" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - bendis

  cart_service:
    image: postgres
    container_name: cart_service
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: Cart
    ports:
      - '5454:5432'
    volumes:
      - CartData:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "Cart" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - bendis

  order_service:
    image: postgres
    container_name: order_service
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: Order
    ports:
      - '5455:5432'
    volumes:
      - OrderData:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "Order" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - bendis

  seller_service:
    image: postgres
    container_name: seller_service
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: Seller
    ports:
      - '5456:5432'
    volumes:
      - SellerData:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "Seller" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - bendis

  admin_service:
    image: postgres
    container_name: admin_service
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: Admin
    ports:
      - '5457:5432'
    volumes:
      - AdminData:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "Admin" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - bendis


volumes:
  redis_data: { }
  redis_seller_data: { }
  UserData: { }
  ProductData: { }
  StoryData: { }
  CommentData: { }
  CartData: { }
  OrderData: { }
  SellerData: { }
  AdminData: { }

networks:
  bendis:
    driver: bridge
